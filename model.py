# -*- coding: utf-8 -*-
"""model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1edVf1HpMERBc-0SA8VDf6PEOjhISbJba
"""

import pandas as pd
import numpy as np
import torch
from transformers import AutoTokenizer, AutoModel
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score
from xgboost import XGBClassifier
import joblib


df = pd.read_csv("relevant_headlines_for_price_direction.csv")
df["Date"] = pd.to_datetime(df["Date"])
df = df[df["PriceUp"] != 0]
keywords = ['earnings', 'tech', 'best', 'netflix', 'stocks', 'buy', 'apple', 'stock', 'growth', 'market']


def extract_keyword_freq(text):
    text = str(text).lower()
    return [text.count(word) for word in keywords]


keyword_features = np.array([extract_keyword_freq(text) for text in df["headline"]])


tokenizer = AutoTokenizer.from_pretrained("yiyanghkust/finbert-tone")
finbert_model = AutoModel.from_pretrained("yiyanghkust/finbert-tone")
finbert_model.eval()


def get_sentiment_score(text):
    inputs = tokenizer(text, return_tensors="pt", truncation=True, padding=True, max_length=64)
    with torch.no_grad():
        outputs = finbert_model(**inputs)
        embedding = outputs.last_hidden_state[:, 0, :].squeeze()
        return embedding.mean().item()


sentiment_array = np.array([get_sentiment_score(text) for text in df["headline"]]).reshape(-1, 1)
df["sentiment_score"] = sentiment_array


daily_sentiment = df.groupby("Date")["sentiment_score"].mean().reset_index()
daily_sentiment = daily_sentiment.rename(columns={"sentiment_score": "daily_sentiment"})


for window in [3, 5, 7]:
    daily_sentiment[f"sentiment_ma_{window}"] = daily_sentiment["daily_sentiment"].rolling(window=window).mean()


df = df.merge(daily_sentiment, on="Date", how="left")
df.fillna(method="bfill", inplace=True)


rolling_features = df[[f"sentiment_ma_{w}" for w in [3, 5, 7]]].values


X = np.hstack((keyword_features, sentiment_array, rolling_features))
y = df["PriceUp"].replace(-1, 0)


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


xgb_model = XGBClassifier(eval_metric="logloss")
xgb_model.fit(X_train, y_train)


y_pred = xgb_model.predict(X_test)
print("âœ… Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))


joblib.dump(xgb_model, "xgb_price_model.pkl")
np.save("mean_rolling_features.npy", np.mean(rolling_features, axis=0))



def predict_price_direction(headline):
    headline_lower = headline.lower()


    keyword_vector = np.array([headline_lower.count(word) for word in keywords]).reshape(1, -1)


    inputs = tokenizer(headline, return_tensors="pt", truncation=True, padding=True, max_length=64)
    with torch.no_grad():
        outputs = finbert_model(**inputs)
        embedding = outputs.last_hidden_state[:, 0, :].squeeze()
        sentiment_score = embedding.mean().item()
    sentiment_score_array = np.array([[sentiment_score]])


    rolling_avg = np.load("mean_rolling_features.npy").reshape(1, -1)


    final_input = np.hstack((keyword_vector, sentiment_score_array, rolling_avg))


    model_loaded = joblib.load("xgb_price_model.pkl")
    prediction = model_loaded.predict(final_input)


    return "ðŸ“ˆ Price Up" if prediction[0] == 1 else "ðŸ“‰ Price Down"


headline = "Netflix stock surges after record-breaking earnings report"
print("Headline:", headline)
print("Prediction:", predict_price_direction(headline))


To test
headline = "Netflix stock surges after record-breaking earnings report"
print("Headline:", headline)
print("Prediction:", predict_price_direction(headline))